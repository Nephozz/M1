###############################  Model ###############################


###############################  Sets  ###############################

set FLUIDES; 

set MAGASINS;

set DEMANDES;

################### Variables ###################

#La personne i participe a la tache j
var F{i in FLUIDES, j in MAGASINS}, => 0;

###################  Constants: Data to load   #########################

param coutsfluides{i in FLUIDES, j in MAGASINS}; 

param stocksfluides{i in FLUIDES, j in MAGASINS};

param demandesfluides{i in FLUIDES, k in DEMANDES};

################### Constraints ###################

s.t. RespectStockMagasins{i in FLUIDES, j in MAGASINS}:
    F[i,j] <= stocksfluides[i,j]

s.t. RespectDemandes{i in FLUIDES, k in DEMANDES}:
    sum{j in MAGASINS} F[i,j] = demandesfluides[i,k]

###### Objective ######

maximize BonheurTotal: 
		sum{i in PERSONNES, j in TACHES} B[i,j]* scorestaches[i,j]; 


end;
