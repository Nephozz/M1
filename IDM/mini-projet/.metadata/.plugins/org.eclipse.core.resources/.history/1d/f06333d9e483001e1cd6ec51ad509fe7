[comment encoding = UTF-8 /]
[module toTina('http://petrinet')]


[template public petrinetToTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let pls : OrderedSet(Place) = aPetriNet.getPlaces()]
	[if (pls->size() > 0)]
		[for (pl : Place | pls)]
			pl [pl.name/] ([pl.jeton.toString()/])
		[/for]
	[else]
	[/if]
[/let]
[let trs : OrderedSet(Transition) = aPetriNet.getTransition()]
	[if (trs->size() > 0)]
		[for (tr : Transition | trs)]
			tr [tr.name/] [tr.sourcePlaces()->toText()/] -> [tr.destinationPlaces()->toText()/]
		[/for]
	[else]
	[/if]
[/let]

[/file]
[/template]

[query public getPlaces(n: PetriNet) : OrderedSet(Place) =
	n.places->select(e | e.oclIsTypeOf(Place))
		->collect(e | e.oclAsType(Place))
		->asOrderedSet()
/]

[query public sourcePlaces(t: Transition) : OrderedSet(Arc) =
	t.arc->select(a | a.direction = ArcDirection::P2T)
		->asOrderedSet()	
/]

[query public destinationPlaces(t: Transition) : OrderedSet(Arc) =
	t.arc->select(a | a.direction = ArcDirection::T2P)
		->asOrderedSet()
/]

[query public getTransition(n: PetriNet) : OrderedSet(Transition) =
	n.transitions->select(e | e.oclIsTypeOf(Transition))
		->collect(e | e.oclAsType(Transition))
		->asOrderedSet()
/]

[template public toText(os : OrderedSet(Arc)) post (trim()) ]
[for (arc : Arc | os)] 
	[if (arc.kind = ArcKind::NORMAL)]
		[arc.place/] + '*' + [arc.weight/]
	[else]
		[arc.place/] + '?' + [arc.weight/]
	[/if]
[/for]
[/template]
